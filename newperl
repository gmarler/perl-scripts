#!/usr/bin/env perl
use v5.10;
use strict;
use warnings;
use autodie qw/:all/;
use Getopt::Long;

my $as;
my $threads;
my ($dist,@dist);

GetOptions ("as=s"     => \$as,        # string
            "dist:s"   => \$dist,      # string (optional)
            "threads"  => \$threads)   # flag
or die("Error in command line arguments\n");

unless ($as) {
  die "Usage: $0 --as=<perl-version>";
}

if ($dist) {
  my $dist_path = 
    "$ENV{HOME}/perl5/perlbrew/dists/${dist}";
  if (-f $dist_path) {
    @dist = ( $dist_path );
  } else {
    die "Specified dist $dist_path doesn't exist";
  }
} else { @dist = (); }
my @args = @ARGV;
 
# --threads means do threads
my @threads = ( $threads ) ? (qw/-D usethreads/) : ();
 
$as =~ s/^5\.//;
my $perl = "5.$as";
$perl =~ s/t$//; # strip trailing "t" if any
my $lib = $as . '@std';

# Test::Base needs gmake! 
my @problem_modules = qw(
  JSON::XS
  IPC::Run
);
 
  # Task::BeLike::DAGOLDEN
my @to_install = qw(

);


### YAML
### Expect
### Term::ReadKey
### Term::Size
### Test::Pod
### Test::Memory::Cycle
### Tie::IxHash
### LWP
### CPAN::Mini
### IO::String
### IPC::Run3
###
### IO::Socket::SSL
### Catalyst::Devel
### Catalyst::View::TT
### Catalyst::View::JSON
### Catalyst::Plugin::Unicode
### Catalyst::Model::Adaptor
### Catalyst::Controller::REST
### XML::LibXML
### XML::DOM
### XML::Twig
### XML::XPath
### Archive::Tar
### Archive::Zip
### HTML::TreeBuilder
### HTML::Entities::Numbered
### Excel::Writer::XLSX
### Math::BigInt
### bignum
### Math::BigInt::FastCalc
### Math::BigRat
### Storable
### Date::Manip
### Date::Calc
#### Net::Pcap
#### Acme::LOLCAT
#### Number::Bytes::Human
### Net::ISC::DHCPd
### IO::Prompt
### Text::Diff
### Perl::Tidy
### Perl::Critic
### CatalystX::REPL
###
### Crypt::Blowfish
### Crypt::CBC
### Crypt::DES
### Crypt::IDEA
#### Crypt::Rijndael
###
### Crypt::X509
### Crypt::DSA
### Crypt::CAST5
### Crypt::OpenSSL::AES
###
#### Catalyst::Plugin::Session::Store::Memcached::Fast
### Catalyst::Plugin::Session::Store::FastMmap
### Catalyst::Plugin::Session::Store::BerkeleyDB
#### ### Catalyst::Plugin::Prototype
### Catalyst::Plugin::Log::Log4perl
### Catalyst::Plugin::LogDeep
### Catalyst::Plugin::LogWarnings
###
### DBIx::Class
### SQL::Translator
### #DBIx::Class::DeploymentHandler
### DBIx::Class::Migration
### DateTime::Format::Strptime
### DateTime::Format::SQLite
### DateTime::Format::MySQL
### Catalyst::Helper::Model::DBIC::Schema
### DBIx::Class::TimeStamp
### Catalyst::Helper::Model::LDAP
### Catalyst::Helper::Prototype

 
my @no_man = qw/-D man1dir=none -D man3dir=none/;
my @solaris_args =
             qw(-DCC=cc -Dccversion="$($CC -V 2>&1)"
                -Dusedtrace -Duse64bitint -Duse64bitall
                -Dsed=/usr/bin/gsed
                -Duselargefiles -D optimize=-xO3
                -n );

# install perl and lock it down
system( qw/perlbrew install/, @dist,
        qw/--as/, $as, $perl, @threads,
        @no_man, @solaris_args, @args );

system( qw/chmod -R a-w/, "$ENV{HOME}/perl5/perlbrew/perls/$as" );
 
# give us a local::lib for installing things
system( qw/perlbrew lib create/, $lib );
 
# let's avoid any pod tests when we try to install stuff
system( qw/perlbrew exec --with/, $lib,
        qw/cpanm -v --mirror-only --mirror/, "$ENV{HOME}/CPAN",
        qw/TAP::Harness::Restricted/ );
local $ENV{HARNESS_SUBCLASS} = "TAP::Harness::Restricted";
 
# some things need forcing
system( qw/perlbrew exec --with/, $lib,
        qw/cpanm -f -v --mirror-only --mirror/, "$ENV{HOME}/CPAN",
        @problem_modules );
 
# now install the rest
# system( qw/perlbrew exec --with/, $lib, qw/cpanm/, @to_install );
 
# repeat to catch any circularity problems
# system( qw/perlbrew exec --with/, $lib, qw/cpanm/, @to_install );
